(provide `cling)
;; set this to change auto .L files, cpp files or shared librarys
(setq cling-cpp `())
(setq cling-cpp-current `())
(setq llvm-loads "#pragma cling add_library_path(\"/home/chengzhengqian/cloud/llvm_shared\")\n.L libLLVMRuntimeDyld.so\n.L libLLVMExecutionEngine.so\n.L libLLVMObject.so\n.L libLLVMMCJIT.so\n")
(setq guile2-2-loads "#pragma cling add_library_path(\"/home/chengzhengqian/cloud/guile2.2/lib\")\n.I /home/chengzhengqian/cloud/guile2.2/include/guile/2.2\n#include \"libguile.h\"\n.L libguile-2.2.so")
(setq boost-loads ".I /home/chengzhengqian/share_workspace/boost_1_65_1/\n")
;; (setq prelude-loads `(,llvm-loads))
;; (setq prelude-loads `(,guile2-2-loads))
;; (setq prelude-loads `())
(setq prelude-loads `(,boost-loads ,llvm-loads))
;; (setq cling-sync-dir-cmd "./sync.sh\n")
(setq cling-sync-dir-cmd "")
(setq cling-term-name "tcling")
(setq info-path-cling "/home/chengzhengqian/cling_info")
(setq info-class-path-cling "/home/chengzhengqian/cling_class_info")
(setq cling-type-regexp "(\\(.*\\))")
;; (defun run-cling ()
;;   (interactive)
;;   (term-send-raw-string ".q\n")
;;   (term-send-raw-string "cling -std=c++11\n")
;;   )

(defun cling-load-list (x)
  (dolist (elt x)
    (term-send-raw-string (format ".L %s\n" elt))
    )
  )
(defun cling-run-list (x)
  (dolist (elt x)
    (term-send-raw-string (format "%s\n" elt))
    )
  )
(defun cling-load-cpp ()
  (interactive)
  (cling-load-list cling-cpp)
  )
(defun cling-load-cpp-current ()
  (interactive)
  (cling-load-list cling-cpp-current)
  )
(defun cling-prelude-load ()
  (interactive)
  (cling-run-list prelude-loads)
  )
(defun run-cling ()
  (interactive)
  (term-send-raw-string ".q\n")
  (term-send-raw-string cling-sync-dir-cmd)
  (term-send-raw-string "cling -std=c++14\n")
  (call-interactively `cling-prelude-load)
  (call-interactively `cling-load-cpp)
  (call-interactively `cling-load-cpp-current)
  )


(defun run-cling-from-other-buffer ()
  (interactive)
  (save-window-excursion
    (progn
      (setq cling-cpp-current `(,(replace-regexp-in-string "<.*>" "" (buffer-name))))
      ;; (switch-to-buffer cling-term-name)
      (save-current-buffer
	(set-buffer cling-term-name)
	(call-interactively `run-cling))
      )
    )
  )
(defun exec-selected-in-cling (beginning end)
  (interactive "r")
  (if (use-region-p)   (setq cling-command (buffer-substring beginning end)) 
    (setq cling-command (thing-at-point `symbol))
      )
  (run-in-cling cling-command)
  )

(defun run-in-cling (command)
  (interactive "scommand:")
  (save-window-excursion
    (progn
      (switch-to-buffer cling-term-name)
      (term-send-raw-string (format "%s\n" command))
      )
    )
  )
(defun get-info-in-cling (command)
  (interactive "scommand:")
  (save-window-excursion
    (progn
      (find-file info-path-cling)
      (mark-whole-buffer)
      (kill-region (region-beginning) (region-end))
      (save-buffer)
      (switch-to-buffer cling-term-name)
      (term-send-raw-string (format ".> %s\n" info-path-cling))
      (term-send-raw-string (format "%s\n" command))
      (term-send-raw-string ".>\n")
      (sleep-for 0.01)
      (switch-to-buffer (file-name-base info-path-cling))
      (revert-buffer-no-confirm)
      (beginning-of-buffer)
      (search-forward-regexp cling-type-regexp)
      (setq cling-class-name (match-string 1))
      (message cling-class-name)
      ;; (switch-to-buffer cling-term-name)
      ;; (term-send-raw-string (format ".> %s\n" info-class-path-cling))
      
      )
    )
  )

(defun get-class-member-in-cling-only ()
  (interactive)
  (save-window-excursion
    (progn
      (find-file info-class-path-cling)
      (mark-whole-buffer)
      (kill-region (region-beginning) (region-end))
      (switch-to-buffer cling-term-name)
      (term-send-raw-string (format ".> %s\n" info-class-path-cling))
      (term-send-raw-string (format ".class %s\n"
				    (get-proper-class-name-in-cling cling-class-name)
				    ))
      (term-send-raw-string ".>\n")
      (sleep-for 0.01)
      (switch-to-buffer (file-name-base info-class-path-cling))
      (revert-buffer-no-confirm)
      (parse-c++-members-from-cling)
      )
    )
  )
(defun get-class-member-in-cling ()
  (interactive)
  (call-interactively `get-info-selected-in-cling)
  (call-interactively  `get-class-member-in-cling-only)
  )
(defun get-class-member-in-cling-from-class-name ()
  (interactive)
  (setq cling-class-name (thing-at-point `symbol))
  (call-interactively  `get-class-member-in-cling-only)
  )

(defun get-proper-class-name-in-cling (name)
  (setq length-cling-name (length name))
  (setq proper-class-name-cling  (if (or
       (= (elt cling-class-name (- length-cling-name 1)) ?&)
       (= (elt cling-class-name (- length-cling-name 1)) ?*))
      (substring name 0 -2)
    name
    ))
  (setq proper-class-name-cling (replace-regexp-in-string "const " "" proper-class-name-cling))
  proper-class-name-cling)


(defun get-info-selected-in-cling (beginning end)
  (interactive "r")
  (if (use-region-p)   (setq cling-command (buffer-substring beginning end)) 
    (setq cling-command (thing-at-point `symbol))
      )
  (get-info-in-cling cling-command)
  )
(setq find-member-function-from-beginning "beginning")
(setq find-member-function-forward "forward")
(setq find-member-function-backward "backward")
(setq find-member-function-scheme find-member-function-from-beginning)

(defun get-member-function-info-selected-in-cling (beginning end)
  (interactive "r")
  (if (use-region-p)   (setq cling-member-function (buffer-substring beginning end)) 
    (setq cling-member-function (thing-at-point `symbol))
      )
  (get-member-function-info-in-cling cling-member-function)
  )

(defun strip-text-properties (text)
  (set-text-properties 0 (length text) nil text)
  text
  )

(defun get-member-function-info-in-cling (name)
  (interactive "sname:")
  (save-window-excursion
    (progn
      (find-file info-class-path-cling)
      (if (string= find-member-function-scheme find-member-function-from-beginning)
	  (beginning-of-buffer)
	nil)
      (if (string= find-member-function-scheme find-member-function-backward)
	  (search-backward name)
	  (search-forward name))
      (setq function-defintion-cling(thing-at-point `line ))
      (message "%s" ( strip-text-properties  function-defintion-cling))
      )))


(defun parse-functions-from-cling ()
  (interactive)
    (backward-char)
  (setq end-paramters (point))
  (backward-list)
  (setq begining-paramters (point))
  (setq cling-c++-member-parameters (buffer-substring begining-paramters end-paramters))
  (search-backward " ")
  (setq begining-function-name (point))
  (setq cling-c++-member-function-name (buffer-substring begining-function-name begining-paramters))
  (search-backward ": ")
  (setq begining-return-type (+ (point) 12))
  (setq cling-c++-member-function-return-type (buffer-substring begining-return-type begining-function-name ))

  )
(defun parse-c++-members-from-cling ()
  (interactive)
  (setq cling-members-num 0)
  (setq cling-members `())
  (while (not (eq(search-forward ";") nil))
    (save-excursion
      (call-interactively `parse-functions-from-cling)
      )
    (setq cling-members    (add-to-list   `cling-members cling-c++-member-function-name))
    (setq cling-members-num    (+ cling-members-num 1))
    )
  )


(defun find-member-in-cling (s)
  (interactive "smember:")
  (setq selected-cling-members (remove-if-not (lambda (x) (cl-search s x)) cling-members))
  (message "%s" selected-cling-members)
  )

(defun get-member-function-info-selected-in-cling-from-beginning ()
  (interactive)
  (setq find-member-function-scheme find-member-function-from-beginning)
  (call-interactively `get-member-function-info-selected-in-cling)
  )
(defun get-member-function-info-selected-in-cling-forward ()
  (interactive)
  (setq find-member-function-scheme find-member-function-forward)
  (call-interactively `get-member-function-info-selected-in-cling)
  )
(defun get-member-function-info-selected-in-cling-backward ()
  (interactive)
  (setq find-member-function-scheme find-member-function-backward)
  (call-interactively `get-member-function-info-selected-in-cling)
  )
(defun  define-cling-keys ()
  (interactive)
  (define-key c++-mode-map (kbd "C-x C-e") `exec-selected-in-cling)
  (define-key c++-mode-map (kbd "C-x C-e") `exec-selected-in-cling)
  (define-key c++-mode-map (kbd "C-x C-r") `run-cling-from-other-buffer)
  (define-key c++-mode-map (kbd "C-x i") `get-info-selected-in-cling)
  (define-key c++-mode-map (kbd "C-x m") `get-class-member-in-cling)
  (define-key c++-mode-map (kbd "C-x f") `find-member-in-cling)
  (define-key c++-mode-map (kbd "C-x n") `get-class-member-in-cling-from-class-name)
  (define-key c++-mode-map (kbd "C-x C-j a") `get-member-function-info-selected-in-cling-from-beginning)
  (define-key c++-mode-map (kbd "C-x C-j n") `get-member-function-info-selected-in-cling-forward)
  (define-key c++-mode-map (kbd "C-x C-j p") `get-member-function-info-selected-in-cling-backward)
  )
(defun  define-cling-keys-for-c ()
  (interactive)
  (define-key c-mode-map (kbd "C-x C-e") `exec-selected-in-cling)
  (define-key c-mode-map (kbd "C-x C-e") `exec-selected-in-cling)
  (define-key c-mode-map (kbd "C-x C-r") `run-cling-from-other-buffer)
  (define-key c-mode-map (kbd "C-x i") `get-info-selected-in-cling)
  (define-key c-mode-map (kbd "C-x m") `get-class-member-in-cling)
  (define-key c-mode-map (kbd "C-x f") `find-member-in-cling)
  (define-key c-mode-map (kbd "C-x n") `get-class-member-in-cling-from-class-name)
  (define-key c-mode-map (kbd "C-x C-j a") `get-member-function-info-selected-in-cling-from-beginning)
  (define-key c-mode-map (kbd "C-x C-j n") `get-member-function-info-selected-in-cling-forward)
  (define-key c-mode-map (kbd "C-x C-j p") `get-member-function-info-selected-in-cling-backward)
  )

(add-hook `c++-mode-hook `define-cling-keys)


