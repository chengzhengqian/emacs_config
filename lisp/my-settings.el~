;; use the following code to load libraries
;; (add-to-list 'load-path "~/.emacs.d/lisp/")
;; (require 'multi-term)
;; (require `insert-code-snippet)
;; (require `my-settings)
;; (require `edit-server)


(provide `my-settings)

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(electric-pair-mode)
(show-paren-mode 1)
(setq show-paren-delay 0)

(display-time-mode 1)
(setq display-time-format "%H:%M")
(display-time-update)

(setq tags-revert-without-query 1)
;;(setq tags-table-list `("/home/chengzhengqian/share_workspace/QL/DualProjection"))

;;I don't know why, but I need to add this to make it work in new computers, any way, everthing works now
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)   

(setq tags-table-list nil)

(global-set-key (kbd "C-c C-m") 'set-mark-command)
(global-set-key (kbd "C-c RET") 'set-mark-command)
(global-set-key (kbd "C-c a") 'beginning-of-buffer)
(global-set-key (kbd "C-c e") 'end-of-buffer)
(global-set-key (kbd "C-c j") 'imenu)
(global-set-key (kbd "C-x t") 'new-shell-or-term)
(global-set-key (kbd "C-c b") 'w3m-search)

(setq CZQ-term-name-pattern "t\\(.*\\)")
(defun new-shell-or-term (name)
     "wrap for new-shell or new-term"
     (interactive "sname(t[.*] for term):")
     (if (string-match-p  CZQ-term-name-pattern name)
	 (new-term name)
	 (new-shell name)
	 )
     )
;; terminal 
(defun new-shell (name)
  (interactive "sname:")
  (shell)
  (rename-buffer name)
  (message (format "start shell %s." name))
)
(defun new-term (name)
  (interactive "sname:")
  (term "/bin/bash")
  (rename-buffer name)
  (message (format "start term %s." name))
)

(add-hook `haskell-mode-hook `intero-mode)

(setq column-number-mode t)

(setq tags-table-list `("/home/chengzhengqian/cloud/TAG_INC","/home/chengzhengqian/cloud/TAG_CPP"    ,"/home/chengzhengqian/cloud/TAG_LLVM"))


(require `my-dict)

(require `w3m-agent)

(defun czq-toggle-node ()
  (interactive)
  (progn
    (end-of-line)
    (call-interactively `origami-toggle-node)
    )
  )

;; this is the previous binding, remove them in the future
(global-set-key (kbd "C-c t") `czq-toggle-node)
(global-set-key (kbd "C-c C-t") `origami-close-all-nodes)
(global-set-key (kbd "C-c T") `origami-open-all-nodes)
;; motivated from vs code
(global-set-key (kbd "C-}") `czq-toggle-node)
(global-set-key (kbd "C-{") `origami-close-all-nodes)
;; to please cygwin login
(global-set-key (kbd "\235") `czq-toggle-node)
(global-set-key (kbd "\233") `origami-close-all-nodes)
;; (global-set-key (kbd "C-c T") `origami-open-all-nodes)
;; update the elpy's key binding
(define-key elpy-mode-map   (kbd "C-c C-t") `origami-close-all-nodes)

;; add ggtags
(add-hook 'c++-mode-hook 'ggtags-mode)
(add-hook 'c-mode-hook 'ggtags-mode)

(defun remap-fsharp-key ()
  (define-key fsharp-mode-map   (kbd "C-c C-t") `origami-close-all-nodes)
  (define-key fsharp-mode-map   (kbd "C-c i") `fsharp-ac/show-tooltip-at-point)

  )
;; add code enbrace
(add-hook 'c++-mode-hook 'origami-mode)
(add-hook 'c-mode-hook 'origami-mode)
(add-hook 'python-mode-hook 'origami-mode)
(add-hook 'fsharp-mode-hook 'remap-fsharp-key)
(add-hook 'fsharp-mode-hook 'origami-mode)
