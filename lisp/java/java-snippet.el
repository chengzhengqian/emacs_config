(provide `java-snippet)

(defun insert-java-snippet (code)
     (interactive "sjni(jn)")
     (cond
      ((string= "jn") (insert-java-jni-template))
      )
     )

(setq czq-java-jni-template "class %s {\n    public static void main(String[] args){\n        }\n    static {\n      System.loadLibrary(\"%s\");}\n\n}\n")
(defun insert-java-jni-template ()
  (let ((class-name (file-name-sans-extension (buffer-name))))
    (insert (format czq-java-jni-template class-name class-name))
    )
  )
(defun czq-java-get-class-dir ()
  (interactive)
   (setq czq-java-split-path (split-string buffer-file-name "/src/"))
  (setq czq-java-class-path (car (cdr czq-java-split-path)))
  (setq czq-java-class-dir  (replace-regexp-in-string "/[^/]*\\.java" "" czq-java-class-path))
  (setq czq-java-class-dir-in-java-form  (replace-regexp-in-string "/" "." czq-java-class-dir)))

(defun czq-java-add-package ()
  (interactive)
  (czq-java-get-class-dir)
  (insert (format "package %s;\n" czq-java-class-dir-in-java-form))
)

(defun czq-java-insert-code-snippet (input)
  (interactive "sp(ackage) ")
  (cond ((string= input "p") (call-interactively `czq-java-add-package))
	(t (message "unknown input"))))

(defun define-java-keys ()
  (interactive)
  (define-key java-mode-map (kbd "C-x j") `czq-java-insert-code-snippet))
;; (define-key java-mode-map (kbd "c-x j") nil)
