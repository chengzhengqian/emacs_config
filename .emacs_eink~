(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(add-to-list 'package-archives
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))
(add-to-list 'package-archives
              '("melpa" . "http://melpa.milkbox.net/packages/") t)

(package-initialize) ;; You might already have this line
;; use elpy as python ide
(elpy-enable)


(require 'company)
(add-hook 'after-init-hook 'global-company-mode)

(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)  


;; After installation of the spkg, you must add something like the
;; following to your .emacs:


;; =============
;; irony-mode
;; =============
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
;; =============
;; company mode
;; =============
(add-hook 'c++-mode-hook 'company-mode)
(add-hook 'c-mode-hook 'company-mode)
;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
(define-key irony-mode-map [remap completion-at-point]
  'irony-completion-at-point-async)
(define-key irony-mode-map [remap complete-symbol]
  'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(eval-after-load 'company
'(add-to-list 'company-backends 'company-irony))
;; (optional) adds CC special commands to `company-begin-commands' in order to
;; trigger completion at interesting places, such as after scope operator
;;     std::|
(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
;; =============
;; flycheck-mode
;; =============
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
(eval-after-load 'flycheck
'(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
;; =============
;; eldoc-mode
;; =============
;;(add-hook 'irony-mode-hook 'irony-eldoc)
;; ==========================================
;; (optional) bind TAB for indent-or-complete
;; ==========================================
(defun irony--check-expansion ()
(save-excursion
  (if (looking-at "\\_>") t
    (backward-char 1)
    (if (looking-at "\\.") t
      (backward-char 1)
      (if (looking-at "->") t nil)))))
(defun irony--indent-or-complete ()
"Indent or Complete"
(interactive)
(cond ((and (not (use-region-p))
            (irony--check-expansion))
       (message "complete")
       (company-complete-common))
      (t
       (message "indent")
       (call-interactively 'c-indent-line-or-region))))
(defun irony-mode-keys ()
"Modify keymaps used by `irony-mode'."
(local-set-key (kbd "TAB") 'irony--indent-or-complete)
(local-set-key [tab] 'irony--indent-or-complete))
(add-hook 'c-mode-common-hook 'irony-mode-keys)

;; (setq sage-shell:sage-root "/home/chengzhengqian/Application/SageMath/") 


(add-to-list 'company-backends 'company-web-html)
(add-to-list 'company-backends 'company-web-jade)
(add-to-list 'company-backends 'company-web-slim)

(require 'multi-web-mode)
(setq mweb-default-major-mode 'html-mode)
(setq mweb-tags 
  '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
    (js-mode  "<script[^>]*>" "</script>")
    (css-mode "<style[^>]*>" "</style>")))
(setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
(multi-web-global-mode 1)


(autoload 'js3-mode "js3" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js3-mode))


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(custom-enabled-themes (quote (tango)))
 '(display-time-mode t)
 '(imenu-auto-rescan t)
 '(package-selected-packages
   (quote
    (js-comint origami fsharp-mode yapfify w3m tuareg slime realgud multi-web-mode magit js3-mode jedi intero haskell-emacs ggtags flycheck-irony etags-select elpy ein edit-server ecb cython-mode company-web company-irony company-ghc auto-complete-sage ac-js2 ac-haskell-process 2048-game)))
 '(realgud-safe-mode nil)
 '(safe-local-variable-values
   (quote
    ((haskell-process-use-ghci . t)
     (haskell-indent-spaces . 4))))
 '(show-paren-mode t)
 '(tool-bar-mode nil))




(setq elpy-rpc-backend "jedi")





(global-set-key "\M-?" 'etags-select-find-tag-at-point)
(global-set-key "\M-." 'etags-select-find-tag)
(add-to-list `auto-mode-alist `("\\.pyx\\'" . cython-mode))
(add-to-list `auto-mode-alist `("\\.h\\'" . c++-mode))
(add-to-list `auto-mode-alist `("\\.pxd\\'" . cython-mode))


(setq gdb-many-windows 1)

           
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 199 :width normal :foundry "DAMA" :family "Ubuntu"))))
 '(ac-completion-face ((t (:foreground "olive drab" :underline t))))
 '(company-tooltip-annotation-selection ((t (:inherit company-tooltip-annotation :background "black" :foreground "white"))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection))))
 '(company-tooltip-selection ((t (:background "black" :foreground "white"))))
 '(cursor ((t (:background "black" :foreground "white"))))
 '(custom-invalid ((t (:background "spring green" :foreground "black"))))
 '(ein:cell-input-area ((t (:background "dark goldenrod"))))
 '(error ((t (:foreground "blue" :weight bold))))
 '(etags-select-highlight-tag-face ((t (:background "black" :foreground "white" :weight bold))))
 '(font-lock-builtin-face ((t (:foreground "#000000"))))
 '(font-lock-keyword-face ((t (:foreground "black" :weight bold))))
 '(font-lock-string-face ((t (:foreground "black"))))
 '(font-lock-type-face ((t (:foreground "black"))))
 '(font-lock-variable-name-face ((t (:foreground "black" :weight light))))
 '(glyphless-char ((t nil)))
 '(highlight-indentation-face ((t (:inherit custom-invalid))))
 '(js2-external-variable ((t (:foreground "black"))))
 '(mode-line ((t (:background "white" :foreground "black" :box (:line-width -1 :style released-button)))))
 '(popup-face ((t (:background "dark violet" :foreground "black"))))
 '(popup-menu-selection-face ((t (:background "black" :foreground "white"))))
 '(popup-tip-face ((t (:background "chartreuse" :foreground "black"))))
 '(region ((t (:background "lime green" :foreground "black"))))
 '(tooltip ((t (:inherit variable-pitch :background "cyan" :foreground "black"))))
 '(w3m-tab-selected ((t (:background "black" :foreground "white"))))
 '(w3m-tab-unselected ((t (:background "white" :foreground "black"))))
 '(warning ((t (:foreground "black" :weight bold))))
 '(widget-field ((t (:background "magenta" :foreground "black")))))

;; javascript mode
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
(add-hook `js2-mode-hook `ac-js2-setup-auto-complete-mode)
(add-hook 'js2-mode-hook '(lambda () 
			    (local-set-key "\C-x\C-e" 'js-send-last-sexp)
			    (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
			    (local-set-key "\C-cb" 'js-send-buffer)
			    (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
			    (local-set-key "\C-cl" 'js-load-file-and-go)
			    ))

(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'multi-term)
(require `insert-code-snippet)
(require `my-settings)
;; (require `edit-server)
;; (edit-server-start)

